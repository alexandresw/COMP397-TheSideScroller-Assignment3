{"version":3,"sources":["managers/collision.ts"],"names":[],"mappings":"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","file":"managers/collision.js","sourcesContent":["module managers {\n    // COLLISION MANAGER CLASS\n    export class Collision {\n        // PRIVATE INSTANCE VARIABLES\n        private _player:objects.Player;\n        \n        constructor(player: objects.Player){\n            this._player = player;    \n        }\n        \n        \n        \n        public check(object:objects.GameObject, eventHandler:scenes.Play) {\n            \n            /* check if the distance between the player and the other object is less than the minimum distance */\n            if( this._checkCollision(this._player, object) ){\n                // check if it's an enemy hit\n                if(object.name === \"enemy\") {\n                    //console.log(\"enemy hit!\");\n                    eventHandler.dispatchEvent(\"enemyHit\");\n                }\n                \n                // check if it's a cloud hit\n                if(object.name === \"energy\") {\n                    //console.log(\"energy hit!\");\n                    eventHandler.dispatchEvent(\"energyCollected\");\n                }\n            }\n        }\n        \n        public checkEnemies(obj1:objects.Enemy, obj2:objects.Enemy) {\n            if( this._checkCollision(obj1, obj2) ){\n                obj1.collided(obj2);\n                obj2.collided(obj1);\n            }\n        }\n        \n        private _checkCollision(obj1:objects.GameObject | objects.Player, obj2:objects.GameObject):boolean {\n            \n            var startPoint:createjs.Point   = new createjs.Point();\n            var endPoint:createjs.Point     = new createjs.Point();\n            var playerHalfHeight:number     = obj1.height * 0.5;\n            var objectHalfHeight:number     = obj2.height * 0.5;\n            var playerHalfWidth:number      = obj1.width * 0.5;\n            var objectHalfWidth:number      = obj2.width * 0.5;\n            \n            startPoint.x = obj1.x;\n            startPoint.y = obj1.y;\n            \n            endPoint.x = obj2.centerX + obj2.x;\n            endPoint.y = obj2.centerY + obj2.y;\n            var minimumDistance:number = playerHalfWidth + objectHalfWidth;\n            \n            if( obj1 instanceof objects.Player ||  Math.abs(endPoint.x - startPoint.x) < Math.abs(endPoint.y - startPoint.y) )\n                minimumDistance = playerHalfHeight + objectHalfHeight;\n            \n            /* check if the distance between the player and the other object is less than the minimum distance */\n            return this.distance(startPoint, endPoint) < minimumDistance;\n        }\n        \n        public distance(startPoint:createjs.Point, endPoint:createjs.Point):number {\n            return Math.sqrt(Math.pow(endPoint.y-startPoint.y,2) + Math.pow(endPoint.x-startPoint.x,2));\n        }\n    }\n}"],"sourceRoot":"/source/"}